{"ast":null,"code":"// THIS FILE IS BASED OF THE RMIT-FWP LAB 08- login-registration-example\nimport axios from \"axios\"; // --- Constants ----------------------------------------------------------------------------------\n\nconst API_HOST = \"http://localhost:4000\";\nconst USER_KEY = \"LAN.user\"; // --- User ---------------------------------------------------------------------------------------\n\nasync function verifyUser(email, password) {\n  const response = await axios.get(API_HOST + \"/api/users/login\", {\n    params: {\n      email,\n      password\n    }\n  });\n  const user = response.data; // NOTE: In this example the login is also persistent as it is stored in local storage.\n\n  if (user !== null) setUser(user);\n  return user;\n}\n\nasync function findUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/select/${id}`);\n  return response.data;\n}\n\nasync function deleteUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/delete/${id}`);\n  return response.data;\n}\n\nasync function createUser(user) {\n  const response = await axios.post(API_HOST + \"/api/users\", user);\n  return response.data;\n}\n\nasync function updateUser(user, oldEmail) {\n  console.log(user);\n  console.log(oldEmail);\n  const response = await axios.post(API_HOST + `/api/users/update/`, user, oldEmail);\n  return response.data;\n} // --- Helper functions to interact with local storage --------------------------------------------\n\n\nfunction setUser(user) {\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n}\n\nfunction getUser() {\n  return JSON.parse(localStorage.getItem(USER_KEY));\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nexport { verifyUser, findUser, createUser, getUser, removeUser, updateUser, deleteUser };","map":{"version":3,"names":["axios","API_HOST","USER_KEY","verifyUser","email","password","response","get","params","user","data","setUser","findUser","id","deleteUser","createUser","post","updateUser","oldEmail","console","log","localStorage","setItem","JSON","stringify","getUser","parse","getItem","removeUser","removeItem"],"sources":["/home/matthew/Desktop/UNI/further-web-programming/A1/3482450/react/src/data/repository.js"],"sourcesContent":["// THIS FILE IS BASED OF THE RMIT-FWP LAB 08- login-registration-example\n\nimport axios from \"axios\";\n\n// --- Constants ----------------------------------------------------------------------------------\nconst API_HOST = \"http://localhost:4000\";\nconst USER_KEY = \"LAN.user\";\n\n// --- User ---------------------------------------------------------------------------------------\nasync function verifyUser(email, password) {\n  const response = await axios.get(API_HOST + \"/api/users/login\", {\n    params: { email, password },\n  });\n  const user = response.data;\n\n  // NOTE: In this example the login is also persistent as it is stored in local storage.\n  if (user !== null) setUser(user);\n\n  return user;\n}\n\nasync function findUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/select/${id}`);\n\n  return response.data;\n}\n\nasync function deleteUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/delete/${id}`);\n\n  return response.data;\n}\n\nasync function createUser(user) {\n  const response = await axios.post(API_HOST + \"/api/users\", user);\n\n  return response.data;\n}\n\nasync function updateUser(user, oldEmail) {\n  console.log(user);\n  console.log(oldEmail);\n  const response = await axios.post(\n    API_HOST + `/api/users/update/`,\n    user,\n    oldEmail\n  );\n\n  return response.data;\n}\n\n// --- Helper functions to interact with local storage --------------------------------------------\nfunction setUser(user) {\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n}\n\nfunction getUser() {\n  return JSON.parse(localStorage.getItem(USER_KEY));\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nexport {\n  verifyUser,\n  findUser,\n  createUser,\n  getUser,\n  removeUser,\n  updateUser,\n  deleteUser,\n};\n"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,uBAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CAEA;;AACA,eAAeC,UAAf,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;EACzC,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAQ,GAAG,kBAArB,EAAyC;IAC9DO,MAAM,EAAE;MAAEJ,KAAF;MAASC;IAAT;EADsD,CAAzC,CAAvB;EAGA,MAAMI,IAAI,GAAGH,QAAQ,CAACI,IAAtB,CAJyC,CAMzC;;EACA,IAAID,IAAI,KAAK,IAAb,EAAmBE,OAAO,CAACF,IAAD,CAAP;EAEnB,OAAOA,IAAP;AACD;;AAED,eAAeG,QAAf,CAAwBC,EAAxB,EAA4B;EAC1B,MAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAQ,GAAI,qBAAoBY,EAAG,EAA7C,CAAvB;EAEA,OAAOP,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAeI,UAAf,CAA0BD,EAA1B,EAA8B;EAC5B,MAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAQ,GAAI,qBAAoBY,EAAG,EAA7C,CAAvB;EAEA,OAAOP,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAeK,UAAf,CAA0BN,IAA1B,EAAgC;EAC9B,MAAMH,QAAQ,GAAG,MAAMN,KAAK,CAACgB,IAAN,CAAWf,QAAQ,GAAG,YAAtB,EAAoCQ,IAApC,CAAvB;EAEA,OAAOH,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAeO,UAAf,CAA0BR,IAA1B,EAAgCS,QAAhC,EAA0C;EACxCC,OAAO,CAACC,GAAR,CAAYX,IAAZ;EACAU,OAAO,CAACC,GAAR,CAAYF,QAAZ;EACA,MAAMZ,QAAQ,GAAG,MAAMN,KAAK,CAACgB,IAAN,CACrBf,QAAQ,GAAI,oBADS,EAErBQ,IAFqB,EAGrBS,QAHqB,CAAvB;EAMA,OAAOZ,QAAQ,CAACI,IAAhB;AACD,C,CAED;;;AACA,SAASC,OAAT,CAAiBF,IAAjB,EAAuB;EACrBY,YAAY,CAACC,OAAb,CAAqBpB,QAArB,EAA+BqB,IAAI,CAACC,SAAL,CAAef,IAAf,CAA/B;AACD;;AAED,SAASgB,OAAT,GAAmB;EACjB,OAAOF,IAAI,CAACG,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqBzB,QAArB,CAAX,CAAP;AACD;;AAED,SAAS0B,UAAT,GAAsB;EACpBP,YAAY,CAACQ,UAAb,CAAwB3B,QAAxB;AACD;;AAED,SACEC,UADF,EAEES,QAFF,EAGEG,UAHF,EAIEU,OAJF,EAKEG,UALF,EAMEX,UANF,EAOEH,UAPF"},"metadata":{},"sourceType":"module"}