{"ast":null,"code":"// THIS FILE IS BASED OF THE RMIT-FWP LAB 08- login-registration-example\nimport axios from \"axios\"; // --- Constants ----------------------------------------------------------------------------------\n\nconst API_HOST = \"http://localhost:4000\";\nconst USER_KEY = \"LAN.user\"; // --- User ---------------------------------------------------------------------------------------\n\nasync function verifyUser(email, password) {\n  const response = await axios.get(API_HOST + \"/api/users/login\", {\n    params: {\n      email,\n      password\n    }\n  });\n  const user = response.data; // NOTE: In this example the login is also persistent as it is stored in local storage.\n\n  if (user !== null) setUserLocal(user);\n  return user;\n}\n\nasync function findUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/select/${id}`);\n  return response.data;\n}\n\nasync function createUser(user) {\n  const response = await axios.post(API_HOST + \"/api/users\", user);\n  return response.data;\n}\n\nasync function updateUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/update/`, user);\n  return response.data;\n}\n\nasync function deleteUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/delete/`, user);\n  return response.data;\n}\n\nasync function updatePassword(passwords) {\n  const response = await axios.post(API_HOST + `/api/users/password/`, passwords);\n  return response.data;\n} // --- POSTS ---------------------------------------------------------------------------------------\n\n\nasync function getPosts() {\n  const response = await axios.get(API_HOST + \"/api/posts\");\n  return response.data;\n}\n\nasync function createPost(post) {\n  const response = await axios.post(API_HOST + \"/api/posts\", post);\n  return response.data;\n}\n\nasync function deletePost(id) {\n  console.log(id);\n  const response = await axios.post(API_HOST + \"/api/posts/deletePost\", id);\n  return response.data;\n}\n\nasync function updatePost(newPost) {\n  console.log(newPost);\n  const response = await axios.post(API_HOST + \"/api/posts/editPost\", newPost);\n  return response.data;\n} // --- COMMENTS ---------------------------------------------------------------------------------------\n\n\nasync function getComments(id) {\n  const response = await axios.get(API_HOST + `/api/comments/select/${id}`);\n  return response.data;\n}\n\nasync function createComment(comment) {\n  const response = await axios.post(API_HOST + \"/api/comments\", comment);\n  return response.data;\n}\n\nasync function deleteComments(id) {\n  const response = await axios.post(API_HOST + \"/api/comments/deleteAll\", id);\n  return response.data;\n} // --- REACTIONS ---------------------------------------------------------------------------------------\n\n\nasync function createReaction(reaction) {\n  console.log(reaction);\n  const response = await axios.post(API_HOST + \"/api/reactions\", reaction);\n  return response.data;\n}\n\nasync function doesReactionExist(postId, useEmail) {\n  const response = await axios.get(API_HOST + \"/api/reactions/exist\", {\n    params: {\n      postId,\n      userEmail\n    }\n  });\n  const reaction = response.data; // NOTE: In this example the login is also persistent as it is stored in local storage.\n\n  return reaction;\n} // --- Helper functions to interact with local storage --------------------------------------------\n\n\nfunction setUserLocal(user) {\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n}\n\nfunction getUser() {\n  return JSON.parse(localStorage.getItem(USER_KEY));\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nexport { verifyUser, findUser, createUser, getUser, removeUser, updateUser, setUserLocal, updatePassword, deleteUser, getPosts, createPost, getComments, createComment, deletePost, deleteComments, updatePost, createReaction };","map":{"version":3,"names":["axios","API_HOST","USER_KEY","verifyUser","email","password","response","get","params","user","data","setUserLocal","findUser","id","createUser","post","updateUser","deleteUser","updatePassword","passwords","getPosts","createPost","deletePost","console","log","updatePost","newPost","getComments","createComment","comment","deleteComments","createReaction","reaction","doesReactionExist","postId","useEmail","userEmail","localStorage","setItem","JSON","stringify","getUser","parse","getItem","removeUser","removeItem"],"sources":["/home/matthew/Desktop/UNI/further-web-programming/A1/3482450/react/src/data/repository.js"],"sourcesContent":["// THIS FILE IS BASED OF THE RMIT-FWP LAB 08- login-registration-example\n\nimport axios from \"axios\";\n\n// --- Constants ----------------------------------------------------------------------------------\nconst API_HOST = \"http://localhost:4000\";\nconst USER_KEY = \"LAN.user\";\n\n// --- User ---------------------------------------------------------------------------------------\nasync function verifyUser(email, password) {\n  const response = await axios.get(API_HOST + \"/api/users/login\", {\n    params: { email, password },\n  });\n  const user = response.data;\n\n  // NOTE: In this example the login is also persistent as it is stored in local storage.\n  if (user !== null) setUserLocal(user);\n\n  return user;\n}\n\nasync function findUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/select/${id}`);\n\n  return response.data;\n}\n\nasync function createUser(user) {\n  const response = await axios.post(API_HOST + \"/api/users\", user);\n\n  return response.data;\n}\n\nasync function updateUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/update/`, user);\n\n  return response.data;\n}\n\nasync function deleteUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/delete/`, user);\n\n  return response.data;\n}\n\nasync function updatePassword(passwords) {\n  const response = await axios.post(\n    API_HOST + `/api/users/password/`,\n    passwords\n  );\n\n  return response.data;\n} // --- POSTS ---------------------------------------------------------------------------------------\nasync function getPosts() {\n  const response = await axios.get(API_HOST + \"/api/posts\");\n\n  return response.data;\n}\n\nasync function createPost(post) {\n  const response = await axios.post(API_HOST + \"/api/posts\", post);\n\n  return response.data;\n}\n\nasync function deletePost(id) {\n  console.log(id);\n  const response = await axios.post(API_HOST + \"/api/posts/deletePost\", id);\n\n  return response.data;\n}\n\nasync function updatePost(newPost) {\n  console.log(newPost);\n  const response = await axios.post(API_HOST + \"/api/posts/editPost\", newPost);\n\n  return response.data;\n}\n// --- COMMENTS ---------------------------------------------------------------------------------------\nasync function getComments(id) {\n  const response = await axios.get(API_HOST + `/api/comments/select/${id}`);\n\n  return response.data;\n}\n\nasync function createComment(comment) {\n  const response = await axios.post(API_HOST + \"/api/comments\", comment);\n\n  return response.data;\n}\n\nasync function deleteComments(id) {\n  const response = await axios.post(API_HOST + \"/api/comments/deleteAll\", id);\n\n  return response.data;\n}\n// --- REACTIONS ---------------------------------------------------------------------------------------\nasync function createReaction(reaction) {\n  console.log(reaction);\n  const response = await axios.post(API_HOST + \"/api/reactions\", reaction);\n\n  return response.data;\n}\n\nasync function doesReactionExist(postId, useEmail) {\n  const response = await axios.get(API_HOST + \"/api/reactions/exist\", {\n    params: { postId, userEmail },\n  });\n  const reaction = response.data;\n\n  // NOTE: In this example the login is also persistent as it is stored in local storage.\n\n  return reaction;\n}\n\n// --- Helper functions to interact with local storage --------------------------------------------\nfunction setUserLocal(user) {\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n}\n\nfunction getUser() {\n  return JSON.parse(localStorage.getItem(USER_KEY));\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nexport {\n  verifyUser,\n  findUser,\n  createUser,\n  getUser,\n  removeUser,\n  updateUser,\n  setUserLocal,\n  updatePassword,\n  deleteUser,\n  getPosts,\n  createPost,\n  getComments,\n  createComment,\n  deletePost,\n  deleteComments,\n  updatePost,\n  createReaction,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}