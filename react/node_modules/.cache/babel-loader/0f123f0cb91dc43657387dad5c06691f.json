{"ast":null,"code":"// THIS FILE IS BASED OF THE RMIT-FWP LAB 08- login-registration-example\nimport axios from \"axios\"; // --- Constants ----------------------------------------------------------------------------------\n\nconst API_HOST = \"http://localhost:4000\";\nconst USER_KEY = \"LAN.user\"; // --- User ---------------------------------------------------------------------------------------\n\nasync function verifyUser(email, password) {\n  const response = await axios.get(API_HOST + \"/api/users/login\", {\n    params: {\n      email,\n      password\n    }\n  });\n  const user = response.data; // NOTE: In this example the login is also persistent as it is stored in local storage.\n\n  if (user !== null) setUserLocal(user);\n  return user;\n}\n\nasync function findUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/select/${id}`);\n  return response.data;\n}\n\nasync function createUser(user) {\n  const response = await axios.post(API_HOST + \"/api/users\", user);\n  return response.data;\n}\n\nasync function updateUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/update/`, user);\n  return response.data;\n}\n\nasync function deleteUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/delete/`, user);\n  return response.data;\n}\n\nasync function updatePassword(passwords) {\n  console.log(passwords);\n  const response = await axios.post(API_HOST + `/api/users/password/`, passwords);\n  return response.data;\n} // --- POSTS ---------------------------------------------------------------------------------------\n\n\nasync function getPosts() {\n  const response = await axios.get(API_HOST + \"/api/posts\");\n  return response.data;\n}\n\nasync function createPost(post) {\n  console.log(\"made it to the create post\");\n  const response = await axios.post(API_HOST + \"/api/posts\", post);\n  console.log(\"made response\");\n  return response.data;\n} // --- Helper functions to interact with local storage --------------------------------------------\n\n\nfunction setUserLocal(user) {\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n}\n\nfunction getUser() {\n  return JSON.parse(localStorage.getItem(USER_KEY));\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nexport { verifyUser, findUser, createUser, getUser, removeUser, updateUser, setUserLocal, updatePassword, deleteUser, getPosts, createPost };","map":{"version":3,"names":["axios","API_HOST","USER_KEY","verifyUser","email","password","response","get","params","user","data","setUserLocal","findUser","id","createUser","post","updateUser","deleteUser","updatePassword","passwords","console","log","getPosts","createPost","localStorage","setItem","JSON","stringify","getUser","parse","getItem","removeUser","removeItem"],"sources":["/home/matthew/Desktop/UNI/further-web-programming/A1/3482450/react/src/data/repository.js"],"sourcesContent":["// THIS FILE IS BASED OF THE RMIT-FWP LAB 08- login-registration-example\n\nimport axios from \"axios\";\n\n// --- Constants ----------------------------------------------------------------------------------\nconst API_HOST = \"http://localhost:4000\";\nconst USER_KEY = \"LAN.user\";\n\n// --- User ---------------------------------------------------------------------------------------\nasync function verifyUser(email, password) {\n  const response = await axios.get(API_HOST + \"/api/users/login\", {\n    params: { email, password },\n  });\n  const user = response.data;\n\n  // NOTE: In this example the login is also persistent as it is stored in local storage.\n  if (user !== null) setUserLocal(user);\n\n  return user;\n}\n\nasync function findUser(id) {\n  const response = await axios.get(API_HOST + `/api/users/select/${id}`);\n\n  return response.data;\n}\n\nasync function createUser(user) {\n  const response = await axios.post(API_HOST + \"/api/users\", user);\n\n  return response.data;\n}\n\nasync function updateUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/update/`, user);\n\n  return response.data;\n}\n\nasync function deleteUser(user) {\n  const response = await axios.post(API_HOST + `/api/users/delete/`, user);\n\n  return response.data;\n}\n\nasync function updatePassword(passwords) {\n  console.log(passwords);\n  const response = await axios.post(\n    API_HOST + `/api/users/password/`,\n    passwords\n  );\n\n  return response.data;\n} // --- POSTS ---------------------------------------------------------------------------------------\nasync function getPosts() {\n  const response = await axios.get(API_HOST + \"/api/posts\");\n\n  return response.data;\n}\n\nasync function createPost(post) {\n  console.log(\"made it to the create post\");\n  const response = await axios.post(API_HOST + \"/api/posts\", post);\n  console.log(\"made response\");\n\n  return response.data;\n}\n\n// --- Helper functions to interact with local storage --------------------------------------------\nfunction setUserLocal(user) {\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n}\n\nfunction getUser() {\n  return JSON.parse(localStorage.getItem(USER_KEY));\n}\n\nfunction removeUser() {\n  localStorage.removeItem(USER_KEY);\n}\n\nexport {\n  verifyUser,\n  findUser,\n  createUser,\n  getUser,\n  removeUser,\n  updateUser,\n  setUserLocal,\n  updatePassword,\n  deleteUser,\n  getPosts,\n  createPost,\n};\n"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,uBAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CAEA;;AACA,eAAeC,UAAf,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;EACzC,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAQ,GAAG,kBAArB,EAAyC;IAC9DO,MAAM,EAAE;MAAEJ,KAAF;MAASC;IAAT;EADsD,CAAzC,CAAvB;EAGA,MAAMI,IAAI,GAAGH,QAAQ,CAACI,IAAtB,CAJyC,CAMzC;;EACA,IAAID,IAAI,KAAK,IAAb,EAAmBE,YAAY,CAACF,IAAD,CAAZ;EAEnB,OAAOA,IAAP;AACD;;AAED,eAAeG,QAAf,CAAwBC,EAAxB,EAA4B;EAC1B,MAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAQ,GAAI,qBAAoBY,EAAG,EAA7C,CAAvB;EAEA,OAAOP,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAeI,UAAf,CAA0BL,IAA1B,EAAgC;EAC9B,MAAMH,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAN,CAAWd,QAAQ,GAAG,YAAtB,EAAoCQ,IAApC,CAAvB;EAEA,OAAOH,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAeM,UAAf,CAA0BP,IAA1B,EAAgC;EAC9B,MAAMH,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAN,CAAWd,QAAQ,GAAI,oBAAvB,EAA4CQ,IAA5C,CAAvB;EAEA,OAAOH,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAeO,UAAf,CAA0BR,IAA1B,EAAgC;EAC9B,MAAMH,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAN,CAAWd,QAAQ,GAAI,oBAAvB,EAA4CQ,IAA5C,CAAvB;EAEA,OAAOH,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAeQ,cAAf,CAA8BC,SAA9B,EAAyC;EACvCC,OAAO,CAACC,GAAR,CAAYF,SAAZ;EACA,MAAMb,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAN,CACrBd,QAAQ,GAAI,sBADS,EAErBkB,SAFqB,CAAvB;EAKA,OAAOb,QAAQ,CAACI,IAAhB;AACD,C,CAAC;;;AACF,eAAeY,QAAf,GAA0B;EACxB,MAAMhB,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,QAAQ,GAAG,YAArB,CAAvB;EAEA,OAAOK,QAAQ,CAACI,IAAhB;AACD;;AAED,eAAea,UAAf,CAA0BR,IAA1B,EAAgC;EAC9BK,OAAO,CAACC,GAAR,CAAY,4BAAZ;EACA,MAAMf,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAN,CAAWd,QAAQ,GAAG,YAAtB,EAAoCc,IAApC,CAAvB;EACAK,OAAO,CAACC,GAAR,CAAY,eAAZ;EAEA,OAAOf,QAAQ,CAACI,IAAhB;AACD,C,CAED;;;AACA,SAASC,YAAT,CAAsBF,IAAtB,EAA4B;EAC1Be,YAAY,CAACC,OAAb,CAAqBvB,QAArB,EAA+BwB,IAAI,CAACC,SAAL,CAAelB,IAAf,CAA/B;AACD;;AAED,SAASmB,OAAT,GAAmB;EACjB,OAAOF,IAAI,CAACG,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqB5B,QAArB,CAAX,CAAP;AACD;;AAED,SAAS6B,UAAT,GAAsB;EACpBP,YAAY,CAACQ,UAAb,CAAwB9B,QAAxB;AACD;;AAED,SACEC,UADF,EAEES,QAFF,EAGEE,UAHF,EAIEc,OAJF,EAKEG,UALF,EAMEf,UANF,EAOEL,YAPF,EAQEO,cARF,EASED,UATF,EAUEK,QAVF,EAWEC,UAXF"},"metadata":{},"sourceType":"module"}